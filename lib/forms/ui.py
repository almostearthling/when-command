# UI single file

import tkinter as tk
# from tkinter import ttk
import ttkbootstrap as ttk

from typing import Callable, Any

from base64 import b64decode
from io import BytesIO
from PIL import Image, ImageTk


# default strings for UI
BTN_OK = "OK"
BTN_CANCEL = "Cancel"
BTN_CLOSE = "Close"
BTN_EXIT = "Exit"
BTN_QUIT = "Quit"
BTN_ADD = "Add"
BTN_REMOVE = "Remove"
BTN_DELETE = "Delete"
BTN_SAVE = "Save"
BTN_LOAD = "Load"
BTN_NEW = "New"
BTN_EDIT = "Edit"
BTN_MODIFY = "Modify"

BTN_FILE_D = "File..."
BTN_FOLDER_D = "Folder..."

try:
    from ..i18n.strings import *
except ImportError:
    pass



# Icon PNGs
ADD_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfoBRMQIBlRRmtcAAAF2UlEQVRYw82XT2xc1RXGf/e+NzPO2E5DE9tJpMaAQklILaUGmiyKqm5gQSCBCtQNQQhSZ0s3ZdWURSQWtKpaqS1pdyBQIxJSioRUpDZdNMKRqgAlhqCqwSjEHjsObbDH4/fePV8X82Y845lJ03bRHmmkmTv33vN9533nz4P/sbkb3bjt+BPUnLHOPELIAIRkyMBJCJHU+iiUVrh88KX/HsD240/gESvOA/CMjfIcH28W2iZjGFTOAVSdNCf0yYaN52cXZnciGVHikYeZiVf+fQC3vvokXpB5QNaH3LjgANIembYhhiVbJwFSVdK8TNOSJmWcQnbOzGo+A3moTBy/MQBbXv8OA8sZWeS4uHKVW0o37ZY4DDwkaRiBTEj1D1rzvf7fnKSTBH5R2cK7w58GAjFFt8jMxBtt/vxaAAPLGchRyFx0c2njo8K9CExczzkdQBhGHJbTi0Mz9khCMQouULNSRwSi1h+3nHgKc44ouCgt6BDwHNKtypkh/hXzfJ3G9xGkeyLSxayQvhNnWN99t1N780JnBLaefAw5cfHor0gKfEtwBGlzzqjDuZmRpClpmmJmDebkmmiNzmaJI3EteuiLWwpYgIHn93VGoP/bYxStyPpv7N7t4MfXY25mDEUDfHNkjC8PbuWz5c9ZzGoAHY8mj8wA0o7qP7IzUcFV0kSkb33UHoFSViIQ+jAmkL7Si7kk0izjzo3bOXbv0/zyvu9y98bbyEK2lnnbOaQx4LCl1lcq+fZHsO3XTwIOJ/dVBw83mPdSuySKPsY7j3eeYhR37l1zPl9/WGhcEoM/un8VQFIrsX1sCkkHGmrvxrxD7blJvdOyIcpcH8MS+29/e4FsXbwKoNS3zF/f3bEZtOd6ed52cYu1qB6pK/NmRJD2fHDXhpFCNQMgbgoHRhE3dxNcmmVta0makIXQBBBCIEkTZAa2ej72HodbS2ZUplGcKk0A1AltAjZ1U/udw9sp+rgZ9iwE9m7Z2QSwd+sdCBE5n98lalnK2ZkPqNT+DjmIHMAm0FDusy0CZaC8Vu13Dd/GsXufxruOotm0Q+P7ODS+r23NZDz+2lFO/u1PFHzcqqN+mcqNfa0Amg+0Q3z/qYnuWmi5sw7ADKDqnKtK6m+oN/Kes/MXeOrN5+uplis6hMDerTs5NP4AAMf+/DpnLr1P7KJmRVwJCZMzHxI115pAliSqbQDynnhF0hWk/tYKOJdc4zeXJtuUnaQJkjUBnLn0Pq98dJpCA6TV8y5yUf3qttTVPNJ8O4B6SKYlPkYabelqOBwFHyPXGkYjcqt9LHYRhSiuAzCB65HGdVLTCkw711IJk1ofG4amZuvDhJTna9f8lwQ5w45CZN33tziXTJP9m6YqWTa4CqBQWmHh8g4UdErSfI+u1uaEVm3mxat3L2gI0ubATi0t7CTyi6sALh98CclAOifpRFfmbbUdalmCyTAZKyGhTq878/o5A3FS4pwQy0featEAUAqBZRfVPHpB6OuIsV61Pfaes7Mf8vhrR0H0UntbN0W8h+kFebdSTFJqud+mkgYf3IXLYPZrs5XypwPzmO4BDXbrCw7HYrrM+avTTH32CdWQdKi9dY5AmpX0vWRQfyjVBA6SP063A7j22yn6H9xF+VKZ1LkL3uwa4u58mFjT1eqXR3k77ixgrfs0I+nZ1NzLxcQJB9UfnG7Kp20mXHrjPH33jyFJqXjHmy6CdiCNNEeuHkNpJ3MD8Z6kZ9LUXi5EFiIfqH7/dKvLzqm45JfAREEhjHxp+FWZDsr4OUZFdeup9hykJKsgfobpsXR94UQh9iFyxlK2vqNa93wxuekn+zEgljBRkmxc0n5gr0yjkoaQyjIhVEWakzEt2STSKcmdk7OVOHjMieUjv+/q57qvZoM/PYA5RzEEJLHhC3/h6sKuEZmNgoYklXPmVaR5ZUz3D52vLF25ox7NpIB549qzv+vp44ZfTtf/8AFC6CfynzdqRueUFCDLBon8YjPP/+/tn027MLiBINuKAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDI0LTA1LTEyVDE0OjE1OjE0KzAwOjAwLEUtgQAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyNC0wNS0wNFQxNDoxOTozMSswMDowMIMO/84AAAAodEVYdGRhdGU6dGltZXN0YW1wADIwMjQtMDUtMTlUMTY6MzI6MjUrMDA6MDCiwoT7AAAAAElFTkSuQmCC'
REMOVE_B_ICON32 = b'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'
CANCEL_B_ICON32 = b'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'
CHECK_MARK_B_ICON32 = b'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'
CLOSE_WINDOW_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfoBRMQIBrITzrmAAAEIklEQVRYw+WWS49URRTHf1V17zyU6e4ZF+KDrcjSnQsXJoRHZibqQogJggwDCIkLPwBbNyQuNTGoBCLRTCJgQksYE3cuXLkE/AQspGemGWy67q06Lrr73rqP6RkMK63kpqpunTrn/M+z4P8+1Gix+c4HaDwOgwJEBERAhmtK+9FHcT8gzemz/fCuAzTwwm+3AYhGCmgNDx9P05q200AjVO4ZDUGpru4+6ulWM/uZKeActKaeTIP+TOBIfialSYpcRSpywilYpOL9ijz/3AWXpr2KAkopQDVEOALyam7uERPJptD8Qy0Cc+f0EtAP3XRUwUVEqgoMkSggqvOniBSEZ8jD/Rb0WYwgcdm1UQFFYLVnjHy0LnswVCBfjEPOiEcZOQK+aJmS8KLyW7gg0KaI3HtPGkeo1BE5lxstEJ4ohY8MUd8O7FwWnimbD10Vml8aXfTeY/e8zMQnZ+DwfmxkEC+5Bt5jI4NaOMDUp+exe17Be18U7gXxAd/tYiA0expHTL3/Lo35g7i33mRdK5Jbd4hTByJYo9ELB5hdPoFpNkCE3udfEPdtBmorF+iqAcomE1TqSO79idvoYhoNWssn0IuHsJGhbwx68RCzZ05img1c9xH27n1UkhSQU+I5PgbCMgtEzmHv/Mq6UrROf4SZ2UXr1HHWtAHvmV06hpnZhdvcZO3SFVx7ldj5IIhHwVuNgS1cUMpzILYpSfsX1gVayx9imk3mPl4CBD05idvosvb1VdIbbeIkGVz1NVkgxUqgK6i3ynMgTlNce5W1y9fw/T56cgI9OYnvWzqXr5He3IFwtnBBxRV1eZ7Vh5o+FSRFbf4HQGqDUKSuvIZ57rFaYxYOMrt0LEM+ssTcqWNE781jjQZfRZ63ZT/4dhQDQZGxUYSeP0Dr7MlBwG106Vz+Dpxndvk4UavJ3LklOiLY67cGKVjuKeMqYXhYrXCgD+9n9vSJgfBHm3QuXcH9dBvxnjXnmDt/CjMzw9zZk/xlLen1NpH3BeF1tUCHQqX82hle8sYQv/7aIM83unS++hZ3s01sLRNJSnqjTefLb0g3uphmg8l9e/FGP10vKB4GXQ2I+pa/v/9xUPXu3sfdWiVO0ix24iQlufEznTRlYt9eNq/+QPzEltwptW7Iwnnt7UWA3Qh/gOwu9/NBM4pRSUI0KjKlVEuVwhtN9CRvRiUrPADeAB68dO/3HcRAwEBDHlg1whEZ+DxNa5EXa0GNC3L5NS+ZLEVlDOOxD5EsNXcWA2OF1KOqjXap9AK1XS8QIK1l4LdDLmORD/8niEhYSEtPMtUV/AoiRxGJxiD5F8glQfwKSBdRVQUcMGUf9mzcvIBwEcjNVXZd4REazFKeQ3oRkC6PfY+GqSqgATv1Irh+D+hVpZaGYluSKr2ChgH/FPf+8+MfJPqUhVx/BQgAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjQtMDUtMTJUMTQ6MTU6MTQrMDA6MDAsRS2BAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDI0LTA1LTA0VDE0OjE5OjMxKzAwOjAwgw7/zgAAACh0RVh0ZGF0ZTp0aW1lc3RhbXAAMjAyNC0wNS0xOVQxNjozMjoyNiswMDowMJMqnmYAAAAASUVORK5CYII='
DELETE_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfoBRMQIBrITzrmAAADcUlEQVRYw+WXy4scVRTGf6eqH9ioY0wwjGh0MyDiIiMiuHKXbITkDwi6Ety4dKEQdCOC4MqVZCW4ExPdCkLQPyAyOiq4MGDig6kaJ3a1mcft+7mo6npXdY8uc6G7b526957vfOe7596Ge73ZSoPeuJF1VhoOKP1+f/N/AHj7e9jYgx8eBu/BH540gteAZype6mtJ3wk+IhzGyOCbT+GFi/DB2RUAvPlTNVIPBG6EBmv4w4uGPgTG3bgFcCCz17HR57ijO4xGhyjDuvh976l8xqA63wAmmJ0FbRJoAwZnME4SDs9IjFPfvQDGwFvAJYaDCK9fMX4Gu4H4FvinPKMKwATwPPAxsI5s2CBL9LQc2JPpJ38+Av2O6RXgeg8AwGt7PBlcPv3E5N1wYI81YiwDUA1P9rI8Rgjv9OfOrbuXD2dum6DK3qDu4NTjk53nzp2+unPr7quQAVCxGJV0qgCR2/PBmV0Av2xsrn229XU82/1jv52zRXv2q78Qut+wT4ALtYVQc/EKiCZIkPSF0CWDZPulR/oZUDrbScQscZxT3eG4ZI/kcW3abQDAg3mcAkXVKAqelztWDTCxMEdLCxoMGNw+N3CCSEoXVdZZPJPZUjsluzJ7zYaiHy+ccmK+nIG5F49+6fAorue3LLKyrSXiNJnFboifvhZjQXMPNxgIXYRPI9uTcPWI21hQBwsZO8577XnmnDixggZ8+CB4ASRAIvFQb97bIi6JVZAgJQBJsoIGts6vIy/kNZWYNiOr5l3NiOvM5OtsnV9fzkAK3HIGyvktM9EoODUtFGOVSCR0tFYAixQoYLrUcYsoa1VyipgeD0Cq1imyZKnjet5r5VkLJo8DwMxjpsS5MGkTVpURKp2WkjwNPVN1nOBBm9GGItkb73txpywsaluuvfjUhOr19+5EB/fttwNoT4FgNDkCsauGBpo0V1JUGysRPzBb3HVWZCDdiiBPJDE/Vkn2hR1pnp4DsPXyeiuAdgaKMKL0EFHYWZJLGikXo+zRCUXWc4vqBJAFGJvkBOM+xz0nogPF6rl8dwNIF4ol3H9wvLA7iajv70Q3AC8QtzFmwNoyx6pwn4t1JvgtK2zHZ8Ckm8LeAV4EQpXO4iWHkAFziesebvb9n+oEYCYQB2ZcEVxBYNjiyoblwRa94qn01sDUo8J7vv0LQ8sU2LSRtcUAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjQtMDUtMTJUMTQ6MTU6MTQrMDA6MDAsRS2BAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDI0LTA1LTA0VDE0OjE5OjMxKzAwOjAwgw7/zgAAACh0RVh0ZGF0ZTp0aW1lc3RhbXAAMjAyNC0wNS0xOVQxNjozMjoyNiswMDowMJMqnmYAAAAASUVORK5CYII='
ENTER_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfoBRMQIBrITzrmAAADEElEQVRYw92Xy27TQBSGv+Nx0zb0AqiEmyhVBaJI3FnxAqwRG96BDa8Cz8CaBUvEE1AkbhLiUpAQl9INNG1SEhJ7Dgu7jTMeN05bhMRII8f2ZM43Z/5zzhj+cRP3wcL9JrENCE2MIKgqqmxdIX9v7ebz3jvoHxMDAfDtdq3PXuij0gRsATgPmF0uMgZeifAORd2XOQARZcTEU8BdVb2erCgD5/FGzyvuuK3+SFVvKay59gLf8lHGUS72jLmdAddcvwSM+9yT84D2lqHuxNl9LdKEb1xyq5QE6IcZbMzvibxYKQdgrTpAgyDy2vCNLQ3gbkUZL5TZih15wA+haGyTeBKhrEZKA2Td5Z00jhkb72Kt0GoZkMAxtqcAeQgbRdROTzA2OcKnZ3U2GupAZON/MMRWHrixrNxYVmbmRom6qtb24tjapCf3lsAIU0erzF3ZT3XCYuN4YL4oam4iktnL1QPHF8LDobQDQwtDGyMtjLQxtDCmiwQCCpO1KicvT/dBZMHdBbgR5tuCA3GHB0fOTJ2bmaseLCI3FYPa5Pf0kX3MX4UPT3+y0QBFKIqIMhqoAGcRZsKxwgjNtemj+5g9F7G0WKcThYUVsZQIBzbxz6WAVUVtUvKGzgPpmI7AG1VM9Ds6iCYa6fu/KuGoITA9+awuN/n0co1OJwDxp+pSW6CwGla4+fl5/cTK+/XHarWWLbWKolHEqWs1Ds1Poxbq35ssLf6guSYQSC4CNr1QCkBAPz5trH57066YcNT6hGS7bWysiEB9ZSMxXhdUJBVmcUreFuDhseR0dvjeCoERcRNJ1hM2svz82mTpyQ8aa/Sl5GEiIOcBl9Rb9STgy+s6sRV+bQR9WXAnEEMApM8DQ2Mr3gXUZ2wXANb2y9K3OiRIDWvpsj1EHticcHtBZcuzD2CPzgNlILKnouEioEADWfeX9cLfOZDIXhxG0/mkCCD3XZCWzZa19mXBGT8tseW+DdJVvUC15XNFXoQiEFbW6bbvqHIBMO5eZ7fLVblHdDHwiph1z2dQQTVM0N+m/f9ufwCiwHl8LuhplgAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyNC0wNS0xMlQxNDoxNToxNCswMDowMCxFLYEAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjQtMDUtMDRUMTQ6MTk6MzErMDA6MDCDDv/OAAAAKHRFWHRkYXRlOnRpbWVzdGFtcAAyMDI0LTA1LTE5VDE2OjMyOjI2KzAwOjAwkyqeZgAAAABJRU5ErkJggg=='
ERROR_B_ICON32 = b'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'
FILE_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAADhUExURQAAAE/m/1Dm/1Ho/0XI8jGP2jqq5TWc31Dn/zGS2zqs5jWd4DKT3Duw6Dag4Tyt5y2I10K/7lHm/1Dn/1Dm/1Dm/1Dm/1Dm/1Hn/0fO9TOX3U/m/1Dm/y6H1zSb31Dm/1Dm/y6J2FDm/y6I1y2G1jKU3D6z6UXJ8lDm/1Dm/1Dm/0/m/1Dm/1Hm/1Dm/1Ho/0PC8EPB8Ct700TB8Ct60yt801Hp/0TA8Cx51Cx70y151C161EbF8zB91i130yx40yt40ip50lDn/03d/ECy6zqf5Dmf4zmg4zig4jih4v///45W7KcAAAAudFJOUwAAAAAAAAAAAAAAAAAAAAAAAAAEV6KnpqecNxTXzzcY6M3n0Mw3xxHWFARXVgTvpjdNAAAAAWJLR0RKHgy1xgAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+gFExAgGshPOuYAAACtSURBVDjLY2CgCmBkZEIAZhZWNnY0BRzCIqJi4lAgISnFyYZugrSMHhzoG8jKcXJxoyhgkldAUmBopAhUgaZACUmBsYmpMpoZKArMzC0sTdHMQFNgZW0JNIOHlw+HFTa2dvYOjiqq/ALYFTg5u7i6uXt4qqkLYlcAVAIGCvJMuBRAgNKogqGqQAFTAXJ0oyR7GNDQRDJBSxuRcSBATFRHVwgp6yHnPQQgJfviBgCzKV1VOgY7TgAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyNC0wNS0xMlQxNDoxNToxNCswMDowMCxFLYEAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjQtMDUtMDRUMTQ6MTk6MzErMDA6MDCDDv/OAAAAKHRFWHRkYXRlOnRpbWVzdGFtcAAyMDI0LTA1LTE5VDE2OjMyOjI2KzAwOjAwkyqeZgAAAABJRU5ErkJggg=='
FOLDER_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAH4UExURQAAAOejAOajAOikAOGdANyXAN2ZAOKeANqYANecANSbANyZAP//2fzUYf/XZ//YZ/7WZfjOWfLFTPXJUtSSAO/ARMyLAPrQXcuMCP/WYvfKUv/VXv/UXP/TWP/SVv/RUv/QUP/PTP7OSv7ORv7MRP7MQP7KPf7KOf7IN/7IM/3GMPS7J/S7JuWlGeOpF+anGtuYEe+0IfzDKv7FLO61INedDuSqGOmkAOejAOejAOejAOejAOekAOGeAOKfAOOfAOKeAOCcANyZANyZANuXANaTANSSANSSANaVBey4OP/XZ//YaP7WZfXJUum2NcyLAMyLAPzTYPnPWsuMCMuMCP/WYv/WYvfJUfjLU//VXv/VXv/UXP/UXP/TWP/TWP/SVv/SVv/RUv/RUv/QUP/QUP/PTP/PTP7OSv7OSv7ORv7ORv7MRP7MRP7MQP7MQP7KPf7KPf7KOf7KOf7IN/7IN/7INP7IM/3GMP7HMPK4Jfe+KfG4JNiUD++zIfzCKv7FLO60INWaDOOfAOOgANyZANSSAMyLAM+PBeeyMv3TYP/XZv/WZcuNCc6QDeSwM/zSXf/WYvnNVfrOVv7TXf/VX//VXv/UXP/TWP/SVv/RUv/QUP/PTP7OSv7ORv7MRP7MQP7KPf7KOf7IN/7IM/7HMf3FLf7GLf///9hA7w0AAACCdFJOUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKVZZTBgPufepJRjotyoY5/7OqKanbQcY5+MWGOfoGBjn5xgY5xjnGOcY5xjnGOcY5xjnGOcY5xjnGOcY5xjnGOkSzhIDNllZNgN8M2qwAAAAAWJLR0SnwLcrAwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+gFExAgGshPOuYAAAEwSURBVDjLvdPFVgIAEEDRwe5uAemyu7u7kw4FpRtRsbu7O77TDQLqmaXe9ds+gL9H+MaP8CvwLy0rr/hSWRUQGPQjCK6uWVl1W6mtqw8JDfsehDc0rvloao6IjHKLjomNi4eEltZ1H23tHZ0eXd09iZDU27fhtbm1veO12z+QDCmDQ3se+weHR76GR1IhbXTs2OPk9Ozc1/hEOhD5gguUgE8EklB0iRIJSUAWS65QEjEZMqSya5RMmgEUueIGpZBTgDo5dYuamqQCTam6Q6mUNKBPz9yjZqbpwFBrHlAaNQOYWt0jSqdlAktveEIZ9CxgG03PKJORDRyz5QVlMXOAa7W9omxWLvDsjjeUw86DzFnn+wfi3TmXBdnzC65FhGtpOQdy8/ILChEFRcUl//DuJ/Dngg8s8MqWAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDI0LTA1LTEyVDE0OjE1OjE0KzAwOjAwLEUtgQAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyNC0wNS0wNFQxNDoxOTozMSswMDowMIMO/84AAAAodEVYdGRhdGU6dGltZXN0YW1wADIwMjQtMDUtMTlUMTY6MzI6MjYrMDA6MDCTKp5mAAAAAElFTkSuQmCC'
EXCLAMATION_MARK_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAIiUExURQAAAPdcVPddVPdcU/ZaUfNWTfRWTvJRSfJSSvBMRfBNRu1IQ+1JQutEPuk/OelAOuc7Nuc7N+Q3M+U3M+IyL+AuK+EuK98oJt4pJ9wkJNwlI9gfH9ogH9YdHdgcG9InJ+AAANYXF9IhIdQUFNQVFfRZT+lGPsQHAutMSOxEP+1GQec6N+EvLOEvK90nJNwkItowKtkmItMuKtobG+IcHP8RF9kfHtgdHNgcHNwgH/dcVPddVPddVPddVPdcU/ZaUfZbUvZaUfNWTfRWTvNWTvJRSfJSSvJSSvBMRfBNRvBNRu1IQ+1JQu5JQu1JQutEPutEPutEPutEPuk/OelAOulAOuk/Ouc7Nuc7Nuc7N+c7N+Q3M+U3M+U3M+Q3M+IyL+MyL+MyL+IyLuAuK+EuK+EuK+AuK98oJt4pJ94pJ94pJ9wjJNwlI9wlI9wkI9gfH9ogH9ogH9kgH9UdHtgcG9gcG9kcHNYXGNYXF9UWFtUUFNQSEtMQEdMREtQUFNQVFf////pkWfhgVfhhV/95behJRvJRSfJTS/NUTPNUS/JSSvNQSetEP+1GQe1HQexGQOc6N+c7N+c6N+EvLOEvK+EvK+EvK90oJNskItsjIdsjIt0lJNgaGtYZGdYYGNcZGdgaGvZbUvRWTvJSSvBNRu5JQutEPulAOuc7N+U3M+MyL+EuK94pJ9wlI9ogH9gcG9YXF+1HQeEvK9siINsiIf///+QjyWQAAAChdFJOUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXUllYLlD7mlP7nUz1kkbviUDp/YA64/t2Nd35bS7X92Qo0fVbIsvzUR3F8UgXv+8/EbrtNQuz6ywFruojnd4YLFRTVUMGAS1NPAsEZtz87JgUM9z5a1P8nULs/oMPmPnLLRRrnoMtg2lmbgAAAAFiS0dEgGW9nmgAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfoBRMQIBrITzrmAAABNElEQVQ4y73RxUICAQCEYUAUFTGxu7sVjLW7u7u7u7u7uwWWhQUWfUDXB5iLB//zd5rhcP41Lpf3mwEPgoREgiCSkiHgp6S+saXxETBMz3hnyzRCQJCV/cGWY4yASW7eJ1u+KQLCgkKZTFZUbIaAqKRULpeXlYsQMK+oVCgUVdUWCFjW1JIkWVdvhYB1Q6NSqWxqtkFA3NJKUVRbuxgB245OlUrV1W2HgH1Pr1qt7ut3QMBxYJCm6aFhJwScR0Y1Gs3YuAsCrhOTWq12atoNAXePGZ1ONzvniYCX9/zC4tLyig8CQt/VtfWNTT9/BAK2tnd29/YPBAgEHh4xDHN8EoRA8OkZexZ5Ds8KubjU6/VX16EIhN3c3n193z+EIxAR+fj0/PIaFY1ATKxEGieVxMOp/9YPcCxd+g3+LvkAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjQtMDUtMTJUMTQ6MTU6MTQrMDA6MDAsRS2BAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDI0LTA1LTA0VDE0OjE5OjMxKzAwOjAwgw7/zgAAACh0RVh0ZGF0ZTp0aW1lc3RhbXAAMjAyNC0wNS0xOVQxNjozMjoyNiswMDowMJMqnmYAAAAASUVORK5CYII='
QUESTION_MARK_B_ICON32 = b'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'
NEW_DOCUMENT_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAACBUExURQAAAFHn/1Pp/1Dm/0/m/1Lm/1Tp/znY/0nm/0Pm/0fm/1Pm/1Hm/1Hn/1Dm/1Dm/0/m/0/n/1Dm/1Dm/1Dm/1Dm/1Dm/1Dm/0/m/1Hm/1Dm/1Hn/1Lp/0jZ8za+2ja92Ta92gNskANsjwNtkFHo/0DN6CCauR+ZuB+ZuVLq/////6BV1TUAAAAadFJOUwAAAAAAAAAAAAAAAAAJFxgJCY7j540J6I0JxHvf6gAAAAFiS0dEKlO+1J4AAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfoBRMQIBrITzrmAAAAs0lEQVQ4y+WTyw6CMBBF0YIvtKAtIi2PggX0/3/QVIgwZZQNO8/6JD1p7jjOAqzWBMf1yFvYbE80QKDhrhPI+cI4AouuvUCZQGG0FwKOC3EwCDKdIAUfBJnlhQIUeSZHQqrKqgRUd5WOBF037QPQNrXm44anhZbiV4MpAILdYAqAYDeYAiBMG/70H4S0MIMBAsas8Jnc3Gjd8IbNPmZR0gnePsQPJzn43ROe++X2/OMSp/0CnZdK1MBUzsAAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjQtMDUtMTJUMTQ6MTU6MTQrMDA6MDAsRS2BAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDI0LTA1LTA0VDE0OjE5OjMxKzAwOjAwgw7/zgAAACh0RVh0ZGF0ZTp0aW1lc3RhbXAAMjAyNC0wNS0xOVQxNjozMjoyNiswMDowMJMqnmYAAAAASUVORK5CYII='
PENCIL_DRAWING_B_ICON32 = b'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'
SAVE_B_ICON32 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfoBRMQIBu/SApwAAAEQ0lEQVRYw+2Xu28dRRTGf2d2rx+JnQQSOy5SQLAINCBEjYRSIEpIFFpa/gUkSmjSROJPoIwCFKFDEQUSUEWiQCQoD6gSEyV+EF/b9+6cj2JnX/euHaeGK412HrtzvvOd75yZC//1n1Wdt288JoRIjDlgCHi6MWJvJ3JqELl2/jjL8xkOyB2XcHdi9PLpEXenKCLRHY+Ry3ciPwyPMgg5IG59sDwFIK86IUQ2N5dYXFyflzjWBgdgZmCGSWAGEpRTyZOqY4Dan+6NLd8Y+Eivf7vG7x+e7gcQY56M2xfApfYagMuRDBdISi31E1pLMKQKu8zgz4HGny+ubX63tXyMc9885PaFlWkAYCTPLwnOoI4Xie4yNJJwCbkjia3dMV/+fJ/14Yg3Vxa4+NoSLoHAsNOCK5srJwJ7w+vK5/Tq1w/54+JKF4BqTShHEyRKeHSiW9dzlQB2xwXf33nEg3/2cHcunDvVsFTusGrSFQ3mGA2L6zPzeb19aBshoVYLUdWthBXdcS+f0UVMLOTByEMgWGLI1exTAjkr7NOZ+fxErwY01UmgWiEovNwc2jooQZR0N+9W7IAQloDwMjDb1nejgW7Ia0O1SN3xqMqhDgCPztjF2EXhZXp6qVYShuRLtal6APQYVj0HoyIS85Dm1AEwCHD+pROs7xa8sXQkseUUbi0iNeVkNwQTHpfpXm6w7YEbDwreXQ5k1rzfTseP3zqDq2Tp0a5z96n4azRbJWavtvZhoHF/ZjaAwBX46mHg2t+xRY0lJia/LSdGMkbZgBDaITiQgTaKUjohM2aPZLXHQwbdzdQoXRPj9kIn8hNIQtto1TTxYdWxtG5thVQFZOKdKePqp6GVht3E7/Wynauio9LuOz2e9zHNPmnYNu6VrZZndWrRM67rRGKqNT68BhJlmcF7KzO8s5QTqpyXI0/9VAUlIe+ujV389AR+fBIovKutfga61hGwmBufrM6xetRKY16dB56KjeFOabxq8tSPrM7Bzc0BG277UpC3jXaiIciAhUyMo9IZ0G0VC91xYsbFQiaydngPLEQdBupzKW3OlPH9AXh9FkSnLlS2jw76RdhipQ9AfQYcNE4hadLwWSKc6JSbWhPbQ3reHsu7GaGD6sB0DKpTz5u4Hsbz2rjTrj16pgjpy9fmaH0ezysNuFcZla6sPRjqUtygNZ7evsf2rTvl/HN6Xrd0XRewd/c+e3fvoVSx205OhkCYCpMjRVwwisKz59NAxcDYLVVJx+QgxpMc1wC8VMoWztUj51Y/khgMx9IvT5z3l4TpcExUz3EUN7cGDCPMnn3FkMaSXxXa6r2SFUXGqcXNnfXthc8IugzYToRfN5zzJ2HWuregydZkTsnxWPDbds5eXQUloa2Tmt9Zs+1pAFnmPB4eJ7O4Y7AjIAvw4owRrPrr0bBnZr3KruYD8MKgrISxWWXNtslat4D/f/8CReruY87UbFIAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjQtMDUtMTJUMTQ6MTU6MTQrMDA6MDAsRS2BAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDI0LTA1LTA0VDE0OjE5OjMxKzAwOjAwgw7/zgAAACh0RVh0ZGF0ZTp0aW1lc3RhbXAAMjAyNC0wNS0xOVQxNjozMjoyNyswMDowMDVdldIAAAAASUVORK5CYII='
SETTINGS_B_ICON32 = b'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'


# convert an image in the above format to a tkinter-compatible PhotoImage:
# this must be used **after** a Tk root has been created
def get_icon(image: bytes):
    return ImageTk.PhotoImage(
        Image.open(BytesIO(b64decode(image))).resize((24, 24)))

def get_appicon(image: bytes):
    return ImageTk.PhotoImage(
        Image.open(BytesIO(b64decode(image))).resize((32, 32)))



# default UI values
DIALOG_PADDING_MAIN = (8, 10)
DIALOG_PADDING_INNER = (4, 6)
WIDGET_PADDING_PIXELS = 5
BUTTON_STANDARD_WIDTH = 12
BUTTON_STANDARD_WIDTH_SMALL = 8



# common settings for all standard buttons
class _btn_Base(ttk.Button):
    def __init__(self, master, text, icon_bytes, command, enabled):
        self._image = get_icon(icon_bytes)
        self._style = ttk.Style()
        self._style.configure(style="stdbutton.TButton", anchor=tk.EW, width=BUTTON_STANDARD_WIDTH)
        if command is None:
            command = ""
        super().__init__(
            master,
            text=text,
            image=self._image,
            compound=tk.LEFT,
            command=command,
            style="stdbutton.TButton",
        )
        self.enable(enabled)

    def enable(self, enabled=True):
        if enabled:
            active=['!disabled']
        else:
            active=['disabled']
        self.state(active)


# standard buttons
class BtnOK(_btn_Base):
    def __init__(self, master, text=BTN_OK, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=CHECK_MARK_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnCancel(_btn_Base):
    def __init__(self, master, text=BTN_CANCEL, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=CANCEL_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnClose(_btn_Base):
    def __init__(self, master, text=BTN_CLOSE, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=CLOSE_WINDOW_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnExit(_btn_Base):
    def __init__(self, master, text=BTN_EXIT, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=CLOSE_WINDOW_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnAdd(_btn_Base):
    def __init__(self, master, text=BTN_ADD, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=ADD_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnRemove(_btn_Base):
    def __init__(self, master, text=BTN_REMOVE, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=REMOVE_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnDelete(_btn_Base):
    def __init__(self, master, text=BTN_DELETE, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=DELETE_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnLoad(_btn_Base):
    def __init__(self, master, text=BTN_LOAD, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=FOLDER_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnSave(_btn_Base):
    def __init__(self, master, text=BTN_SAVE, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=SAVE_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnNew(_btn_Base):
    def __init__(self, master, text=BTN_NEW, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=NEW_DOCUMENT_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnEdit(_btn_Base):
    def __init__(self, master, text=BTN_EDIT, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=PENCIL_DRAWING_B_ICON32,
            command=command,
            enabled=enabled,
        )

class BtnModify(_btn_Base):
    def __init__(self, master, text=BTN_MODIFY, command=None, enabled=True):
        super().__init__(
            master,
            text=text,
            icon_bytes=PENCIL_DRAWING_B_ICON32,
            command=command,
            enabled=enabled,
        )


# ...


# button box constants
BBOX_OK = 'ok'
BBOX_CANCEL = 'cancel'
BBOX_ADD = 'add'
BBOX_REMOVE = 'remove'
BBOX_DELETE = 'delete'
BBOX_EDIT = 'edit'
BBOX_MODIFY = 'modify'
BBOX_LOAD = 'load'
BBOX_SAVE = 'save'
BBOX_NEW = 'new'
BBOX_CLOSE = 'close'
BBOX_EXIT = 'exit'
BBOX_QUIT = 'quit'
BBOX_SEPARATOR = '*'


# type constants
TYPE_BOOL = 'bool'
TYPE_INT = 'int'
TYPE_FLOAT = 'float'
TYPE_STRING = 'str'


# base dialog box class: provide a button strip at the bottom and a contents
# area that can be used to display the needed widgets; also provides utilities
# to bind widgets to retrievable values
class ApplicationForm(object):

    # the initialization sets the form dimensions and prepares the default
    # button box, binding the displayed buttons to default actions: buttons
    # in the button box are chosen by specifying one of the above constants
    # and one instance of BBOX_SEPARATOR: not specifying the position of the
    # separator is equivalent to assigning it the first position, specifying
    # it more than one time can lead to unexpected layouts.
    def __init__(self, title: str,
                 size: tuple[int, int], icon: bytes | None,
                 buttons: tuple[str, ...] = (BBOX_OK, BBOX_CANCEL),
                 main: bool = False):
        self._main = main
        if main:
            self._dialog = tk.Tk()
        else:
            self._dialog = tk.Toplevel()
        self._icon = None
        if icon is not None:
            self._icon = get_appicon(icon)
            self._dialog.iconphoto(main, self._icon)

        # position the form at the center of the screen
        sw = self._dialog.winfo_screenwidth()
        sh = self._dialog.winfo_screenheight()
        geometry = "%sx%s+%s+%s" % (
            size[0], size[1], int(sw/2-size[0]/2), int(sh/2-size[1]/2))
        self._dialog.title(title)
        self._dialog.geometry(geometry)
        self._dialog.resizable(False, False)
        self._area = ttk.Frame(self._dialog, padding=DIALOG_PADDING_MAIN)
        self._area.grid(column=0, row=0, sticky=(tk.N, tk.W, tk.S, tk.E))
        self._contents = ttk.Frame(self._area, padding=DIALOG_PADDING_INNER)
        self._contents.grid(row=0, sticky=(tk.N, tk.W, tk.S, tk.E))
        self._contents.columnconfigure(0, weight=1)
        self._contents.rowconfigure(0, weight=1)
        sep = ttk.Separator(self._area)
        sep.grid(row=1, sticky=(tk.N, tk.W, tk.S, tk.E))
        sep.rowconfigure(0, weight=1)
        bbox = ttk.Frame(self._area, padding=DIALOG_PADDING_INNER)
        pos = 0
        fill_idx = 0
        self._std_buttons = {}
        buttons = list(buttons)
        if '*' not in buttons:
            buttons.insert(0, '*')
        for btn_name in buttons:
            btn = None
            match btn_name:
                case '*':
                    fill_idx = pos
                    pos += 1
                case 'ok':
                    btn = BtnOK(bbox, command=self.exit_ok)
                case 'cancel':
                    btn = BtnCancel(bbox, command=self.exit_cancel)
                case 'add':
                    btn = BtnAdd(bbox, command=self.add)
                case 'remove':
                    btn = BtnRemove(bbox, command=self.remove)
                case 'delete':
                    btn = BtnDelete(bbox, command=self.delete)
                case 'edit':
                    btn = BtnEdit(bbox, command=self.edit)
                case 'modify':
                    btn = BtnEdit(bbox, command=self.edit)
                case 'load':
                    btn = BtnLoad(bbox, command=self.load)
                case 'save':
                    btn = BtnSave(bbox, command=self.save)
                case 'new':
                    btn = BtnNew(bbox, command=self.new)
                case 'close':
                    btn = BtnClose(bbox, command=self.exit_close)
                case 'exit':
                    btn = BtnExit(bbox, command=self.exit_close)
                case 'quit':
                    btn = BtnClose(bbox, command=self.exit_close, text=BTN_QUIT)
            if btn is not None:
                btn.grid(row=0, column=pos, padx=DIALOG_PADDING_INNER[0])
                self._std_buttons[btn_name] = btn
                pos += 1
        fill = ttk.Frame(bbox)
        fill.grid(row=0, column=fill_idx, sticky=(tk.W, tk.E))
        bbox.grid(row=2, sticky=(tk.N, tk.W, tk.S, tk.E))
        bbox.columnconfigure(fill_idx, weight=1)
        bbox.rowconfigure(0, weight=1)
        self._area.rowconfigure(0, weight=1)
        self._area.columnconfigure(0, weight=1)
        self._dialog.columnconfigure(0, weight=1)
        self._dialog.rowconfigure(0, weight=1)
        self._widgets = {}
        self._data = {}
        self._checks = {}

    # support the context manager protocol
    def __enter__(self):
        return self
    
    def __exit__(self, _exc_type, _exc_value, _traceback):
        del self._dialog


    # contents is the root for slave widgets
    @property
    def contents(self):
        return self._contents


    # form to use as parent when needed
    @property
    def dialog(self):
        return self._dialog

    # internals
    # force a variable value (and mimic ttk *Var retrieval method used below)
    def _force_set_data(self, name: str, value: Any):
        class _Elem(object):
            def __init__(self, v):
                self._v = v
            def get(self):
                return self._v
        data = _Elem(value)
        self._data[name] = data
    
    # bind a ttk.Treeview to a variable: it involves defining a new
    # function and reacting to a (virtual) event
    def _bind_ttk_treeview(self, name: str, treeview: ttk.Treeview):
        def _store_data(event):
            iid = treeview.focus()
            data = treeview.item(iid)['values']
            self._force_set_data(name, data)
        self._force_set_data(name, None)
        treeview.bind('<<TreeviewSelect>>', _store_data)


    # bind widgets to data: the parameters are the following
    # - name: the name under which the data is bound to a value
    # - widget: the widget that holds the data value, or a tuple of radio
    #           buttons to be bound to a single variable
    # - dtype: type of data in the widget: 'bool', 'int', 'float', 'str',
    #          or None for some widget types
    # - check: a function that returns True if data is valid, False otherwise
    #
    # Ok, the following is quite complicated - maybe overly complicated at
    # first sight. But I actually prefer to make this one somehow convoluted
    # in order to let the consumers be more streamlined.
    def data_bind(self, name: str,
                  widget: tk.Widget | tuple[ttk.Radiobutton, ...],
                  dtype: str | None = None,
                  check: Callable[..., bool] | None = None):
        # as per documentation, the configure() method is not the preferred
        # method to configure a widget in tkinter, and direct access to the
        # widget keys (as if it were a dict) is used in the examples
        # see: https://docs.python.org/3/library/tkinter.html#setting-options
        if isinstance(widget, tk.Widget):
            opts = widget.keys()
        else:
            opts = []
        # store a reference to the widget
        self._widgets[name] = widget
        # special and non-bindable widget cases are treated one by one
        # TODO: hunt for possible special cases such as bool only widgets
        if isinstance(widget, ttk.Treeview):
            if dtype is not None:
                raise ValueError("cannot specify type for Treeview")
            self._bind_ttk_treeview(name, widget)
        # one-type widgets
        elif isinstance(widget, (tk.Checkbutton, ttk.Checkbutton)):
            if dtype is not None and dtype != 'bool':
                raise ValueError("Checkbutton only provides boolean values")
            var = tk.BooleanVar()
            widget['variable'] = var
            self._data[name] = var
        # spin buttons?
        # scales?
        # special case: radio buttons (to be passed in groups)
        elif isinstance(widget, tuple):
            match dtype:
                case 'str':
                    var = tk.StringVar()
                case 'int':
                    var = tk.IntVar()
                case 'float':
                    var = tk.DoubleVar()
                case None:
                    raise ValueError("type must be specified")
                case _:
                    raise ValueError("unsupported type: %s" % dtype)
            for w in widget:
                if not isinstance(w, (tk.Radiobutton, ttk.Radiobutton)):
                    raise TypeError("Only Radiobuttons are passed in groups")
                w.configure(variable=var)
                #w['variable'] = var
            self._data[name] = var
        # the following is a hack: we create the variable and handle it in a
        # specific way just when setting or getting, leaving it unbound
        elif isinstance(widget, tk.Text):
            if dtype is not None and dtype != 'str':
                raise ValueError("Text only provides string values")
            var = tk.StringVar()
            self._data[name] = var
        # only strings and numbers for text elements (TODO: verify)
        elif 'textvariable' in opts:
            match dtype:
                case 'str':
                    var = tk.StringVar()
                case 'int':
                    var = tk.IntVar()
                case 'float':
                    var = tk.DoubleVar()
                case None:
                    raise ValueError("type must be specified")
                case _:
                    raise ValueError("unsupported type: %s" % dtype)
            widget['textvariable'] = var
            self._data[name] = var
        # for bindable non-text widgets strings are not supported
        elif 'variable' in opts:
            match dtype:
                case 'bool':
                    var = tk.BooleanVar()
                case 'int':
                    var = tk.IntVar()
                case 'float':
                    var = tk.DoubleVar()
                # case 'str':
                #     var = tk.StringVar()
                case None:
                    raise ValueError("type must be specified")
                case _:
                    raise ValueError("unsupported type: %s" % dtype)
            widget['variable'] = var
            self._data[name] = var
        else:
            # TODO: remove the following debug statement
            print(widget.widgetName, opts)
            pass
        # if validation is allowed use the provided validator (if any)
        if check is not None and 'validatecommand' in opts:
            widget['validatecommand'] = check
        # final check is always set, possibly to an always pass test
        self._checks[name] = check or (lambda _: True)

    # retrieve a data item
    def data_get(self, dataname: str, default: Any | None = None):
        if dataname in self._data:
            widget = self._widgets[dataname]
            if isinstance(widget, tk.Text):
                s = widget.get(1.0, tk.END)
                self._data[dataname].set(s)
            try:
                rv = self._data[dataname].get()
                if self._checks[dataname](rv):
                    return rv
                else:
                    return None
            except Exception as _:
                return None
        else:
            return default

    # set the value of a widget: None is used to clear the widget
    def data_set(self, dataname: str, value: Any | None = None):
        if dataname in self._data:
            try:
                if value is None:
                    self._data[dataname].set('')
                elif self._checks[dataname](value):
                    self._data[dataname].set(value)
                else:
                    raise ValueError("invalid value %s for entry `%s`" % (repr(value), dataname))
                widget = self._widgets[dataname]
                if isinstance(widget, tk.Text):
                    widget.delete(1.0, tk.END)
                    widget.insert(tk.END, '' if value is None else value)
            except TypeError:
                raise ValueError("invalid value %s for entry `%s`" % (repr(value), dataname))
            except ValueError:
                raise ValueError("invalid value %s for entry `%s`" % (repr(value), dataname))
        else:
            raise IndexError("entry `%s` not found" % dataname)

    # verify that a data item exists and that it passes the provided checks
    def data_exists(self, dataname: str):
        return dataname in self._data

    def data_valid(self, dataname: str):
        if dataname in self._data:
            rv = self._data[dataname].get()
            return self._checks[dataname](rv)
        else:
            return False
    
    # return a list of the widget-bound variables
    @property
    def data_vars(self):
        return list(self._data.keys())

    # exit functions are predefined and may be overridden or not: the
    # default implementation destroys the window and: if OK leave form
    # data accessible, otherwise clear form data
    def exit_ok(self):
        self._dialog.destroy()

    def exit_cancel(self):
        self._data = {}
        self._dialog.destroy()

    def exit_close(self):
        self._dialog.destroy()

    def exit_quit(self):
        self._dialog.destroy()

    # other button reactions have to be overridden because the default
    # implementation just does nothing
    def load(self):
        pass

    def save(self):
        pass

    def new(self):
        pass

    def add(self):
        pass

    def delete(self):
        pass

    def edit(self):
        pass

    def modify(self):
        pass

    def remove(self):
        pass


    # the following utilities allow to enable or disable the default buttons
    def enable_buttons(self, *names: str):
        for name in map(str.lower, names):
            if name in self._std_buttons:
                self._std_buttons[name].enable(True)

    def disable_buttons(self, *names: str):
        for name in map(str.lower, names):
            if name in self._std_buttons:
                self._std_buttons[name].enable(False)


    # main dialog loop: the initial dialog will actually have a main loop
    # while the following ones will just be spawned and then waited for
    def run(self):
        if self._main:
            self._dialog.mainloop()
        else:
            self._dialog.wait_window()



# only export interesting stuff
__all__ = [
    'ApplicationForm',
    'BBOX_OK',
    'BBOX_CANCEL',
    'BBOX_ADD',
    'BBOX_REMOVE',
    'BBOX_DELETE',
    'BBOX_EDIT',
    'BBOX_MODIFY',
    'BBOX_LOAD',
    'BBOX_SAVE',
    'BBOX_NEW',
    'BBOX_CLOSE',
    'BBOX_EXIT',
    'BBOX_QUIT',
    'BBOX_SEPARATOR',

    'DIALOG_PADDING_MAIN',
    'DIALOG_PADDING_INNER',
    'WIDGET_PADDING_PIXELS',
    'BUTTON_STANDARD_WIDTH',
    'BUTTON_STANDARD_WIDTH_SMALL',

    'TYPE_BOOL',
    'TYPE_INT',
    'TYPE_FLOAT',
    'TYPE_STRING',

    'BtnOK',
    'BtnCancel',
    'BtnClose',
    'BtnExit',
    'BtnAdd',
    'BtnRemove',
    'BtnDelete',
    'BtnLoad',
    'BtnSave',
    'BtnNew',
    'BtnEdit',
    'BtnModify',
]


# end.
