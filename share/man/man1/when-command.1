.\" Man page generated from reStructuredText.
.
.TH "WHEN-COMMAND" "1" "December 05, 2015" "0.9" "When Documentation"
.SH NAME
when-command \- When Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fBWhen\fP is a configurable user task scheduler for modern Gnome environments.
It interacts with the user through a GUI, where the user can define tasks and
conditions, as well as relationships of causality that bind conditions to
tasks. When a condition is bound to a task, it is said to trigger a task.
.SH OVERVIEW
.sp
\fBWhen\fP deals mainly with two types of entities, \fITasks\fP and \fIConditions\fP\&.
These entity types are used to define \fIitems\fP using the applet configuration
dialog boxes. Unlike similar applications, since \fIitems\fP do not only represent
checks or commands, they are referenced by \fIname\fP throughout the user interface
of the applet. Item names must:
.INDENT 0.0
.IP \(bu 2
begin with either a letter or a number
.IP \(bu 2
contain only letters, numbers, underscores or dashes (no spaces)
.UNINDENT
.sp
and are case sensitive. A \fITask\fP consists of a command, which will run in
the default shell, along with an environment and some hints on how to consider
it successful or not. \fITasks\fP correspond to a single command line each: this
means that they can consist of several shell commands each, as long as they can
fit on a single shell line \-\- for instance using shell separators (such as
semicolons, \fB;\fP) or other conjunctions or disjunctions. A \fICondition\fP
consists of an inherent \fItest\fP or associated \fIevent\fP, a set of \fITasks\fP and
instructions on how tasks should run in case the test succeeds or the event
occurs. There is no concept of \fIfailure\fP in conditions: a condition can either
occur or not.
.sp
The relationship between \fITasks\fP and \fIConditions\fP consists in the possibility
for a condition to trigger a task: if the tests or events that determine the
condition are positive, then the tasks associated with that condition are
\fIvery likely\fP to run \-\- execution of a task may be prevented either by the
\fBWhen\fP applet itself, if a previously run task in the same condition
occurrence [1] has failed (or succeeded) and the condition is set
to break in such an event, or by the underlying system if there is something
wrong with the task itself. The latter case is however normally interpreted as
a task \fIfailure\fP\&.
.sp
More than one task can be associated to a condition: if tasks in a set that is
associated to a condition can be considered as \fIindependent\fP, then the user
can choose to run the tasks simultaneously in multiple threads [2]
otherwise such tasks can run in sequence, and the sequence can be interrupted,
at user\(aqs choice, either on first task failure or on first task success.
.sp
This shows how a single \fIcondition\fP can be associated to multiple \fItasks\fP\&.
However a \fItask\fP can be "reused" in more than one condition: this is
particularly useful when a certain action is required to be triggered under
different circumstances \-\- say, at certain times \fIand\fP when an event occurs \-\-
in which case both involved conditions may trigger the same task, possibly
within different task sets.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Most of the \fItokens\fP that decide whether or not a condition is verified are
\fIenqueued\fP to be checked at intervals, which in the case of relatively
"inexpensive" checks is at every clock tick, while in other cases is at
longer intervals defined in the \fBskip seconds\fP configuration parameter.
For example, conditions that depend on outcome of \fIexternal commands\fP are
checked at longer intervals. Also, most [3] system and
session events cause the associated condition to be verified at the next
clock tick instead of immediately. If such events occur \fIagain\fP when the
task set for the associated condition is already enqueued to be run, it is
executed only once \-\- further attempts to enqueue it are simply skipped.
.UNINDENT
.UNINDENT
.sp
The \fBWhen\fP applet can be thought of as a main loop that incorporates a
\fIclock\fP and an \fIevent listener\fP\&. Whenever the clock ticks, conditions are
evaluated, and when an event is caught a \fItoken\fP is issued for the associated
condition to evaluate to \fItrue\fP, so that the task set that it surrounds can
be run. Conditions that do not receive a token or whose test evaluates to
\fIfalse\fP are skipped for further evaluation.
.sp
\fIConditions\fP can also be marked as \fIrecurring\fP: if a condition has \fInot\fP been
instructed to \fIrepeat checks\fP, the corresponding tests (and received tokens)
are skipped after the first time the associated task set has been triggered,
until the \fBWhen\fP applet is restarted \-\- either in a new session or by direct
intervention. Enabling the \fIrepeat checks\fP feature, on the other side, allows
the condition to be \fIrecurring\fP, or even \fIperiodic\fP in the case of interval
based conditions.
.sp
There is another type of entity that can be defined, for which the naming
convention is the same as for \fITasks\fP and \fIConditions\fP, that is
\fISignal Handlers\fP: these can be used to define special \fIevents\fP to be caught by
\fIConditions\fP when certain \fIDBus Signals\fP are emitted. This advanced feature is
intended for users with a background on \fIDBus\fP specification and is not for
general use. [4]
.SH COMMAND LINE INTERFACE
.sp
This paragraph illustrates the command line options that can be used to either
control the behaviour of a running \fBWhen\fP instance or to handle its
configuration or persistent state \-\- consisting of \fItasks\fP, \fIconditions\fP and
\fIsignal handlers\fP\&. Some of the options are especially useful to recover when
something has gone the wrong way \-\- such as the \fB\-\-show\-settings\fP switch
mentioned above, or the \fB\-I\fP (or \fB\-\-show\-icon\fP) switch, to recover from an
unwantedly hidden icon. There are also switches that grant access to "advanced"
features, which are better covered in the next sections.
.sp
The available options are:
.INDENT 0.0
.TP
.B \-s\fP,\fB  \-\-show\-settings
show the settings dialog box of an existing instance,
it requires a running instance, which may be queried
using the \fB\-\-query\fP switch explained below
.TP
.B \-l\fP,\fB  \-\-show\-history
show the history dialog box of an existing instance
.TP
.B \-t\fP,\fB  \-\-show\-tasks
show the task dialog box of an existing instance
.TP
.B \-c\fP,\fB  \-\-show\-conditions
show the condition dialog box of an existing instance
.TP
.B \-d\fP,\fB  \-\-show\-signals
show the DBus signal handler editor box for an
existing instance [4]
.TP
.B \-R\fP,\fB  \-\-reset\-config
reset applet configuration to default, requires the
applet to be shut down with an appropriate switch
.TP
.B \-I\fP,\fB  \-\-show\-icon
show applet icon, the icon will be shown at the next
startup
.TP
.B \-T\fP,\fB  \-\-install
install or reinstall application icon and autostart
icon, requires applet to be shut down with an
appropriate switch
.TP
.B \-C\fP,\fB  \-\-clear
clear current tasks, conditions and possibly signal
handlers, requires applet to be shut down with an
appropriate switch
.TP
.B \-Q\fP,\fB  \-\-query
query for an existing instance (returns a zero exit
status if an instance is running, nonzero otherwise,
and prints an human\-readable message if the
\fB\-\-verbose\fP switch is also specified)
.TP
.BI \-H \ file\fP,\fB \ \-\-export\-history \ file
export the current task history (the ones
shown in the history box) to the file
specified as argument in a CSV\-like format
.TP
.BI \-r \ cond\fP,\fB \ \-\-run\-condition \ cond
trigger a command\-line associated condition
and immediately run the associated tasks;
\fIcond\fP must be specified and has to be one of
the \fICommand Line Trigger\fP conditions,
otherwise the command will fail and no task
will be run
.TP
.BI \-f \ cond\fP,\fB \ \-\-defer\-condition \ cond
schedule a command\-line associated condition
to run the associated tasks at the next clock
tick; the same as above yields for \fIcond\fP
.TP
.B \-\-shutdown
close a running instance performing shutdown tasks
first
.TP
.B \-\-kill
close a running instance abruptly, no shutdown tasks
are run
.TP
.BI \-\-export \ file
save tasks, conditions and other items to a portable
format; the \fIfile\fP argument is optional, and if not
specified the applet tries to save these items to a
default file in \fB~/.config/when\-command\fP; this will
especially be useful in cases where the compatibility
of the "running" versions of tasks and conditions
(which are a binary format) could be broken across
releases
.TP
.BI \-\-import \ file
clear tasks, conditions and other items and import
them from a previously saved file; the \fIfile\fP argument
is optional, and if not specified the applet tries
to import these items from the default file in the
\fB~/.config/when\-command\fP directory; the applet has
to be shut down before attempting to import items.
.UNINDENT
.sp
Some trivial switches are also available:
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
show a brief help message and exit
.TP
.B \-V\fP,\fB  \-\-version
show applet version, if \fB\-\-verbose\fP is specified
it also shows the \fIAbout Box\fP of a running instance,
if present
.TP
.B \-v\fP,\fB  \-\-verbose
show output for some options; normally the applet
would not display any output to the terminal unless
\fB\-v\fP is specified, the only exception being
\fB\-\-version\fP that prints out the version string
anyway.
.UNINDENT
.sp
Please note that whenever a command line option is given, the applet will not
"stay resident" if there is no running instance. On the other side, if the user
invokes the applet when already running, the new instance will bail out with
an error.
.SH THE APPLET
.sp
The applet will show up in the indicator tray at startup, which would normally
occur at login if the user chose to add \fBWhen\fP to the startup applications.
It will read its configuration and start the scheduler in an unattended
fashion. Whenever one of the user defined conditions is met, the associated
tasks are executed. A small alarm clock icon will display in the indicator
tray, to show that the applet is running: by default it turns to an attention
sign when the applet requires attention. Also, the icon changes its shape
when the applet is \fIpaused\fP (the clock is crossed by a slash) and when a
configuration dialog is open (the alarm clock shows a plus sign inside the
circle).
.sp
The icon grants access to the main menu, which allows the following basic
operations:
.INDENT 0.0
.IP \(bu 2
open the \fI\%Task\fP editing dialog box
.IP \(bu 2
open the \fI\%Condition\fP editing dialog box
.IP \(bu 2
open the \fI\%Settings\fP dialog box
.IP \(bu 2
show the \fI\%Task History\fP window
.IP \(bu 2
\fIpause\fP and \fIresume\fP the scheduler
.IP \(bu 2
show the \fIAbout\fP box
.IP \(bu 2
quit the applet.
.UNINDENT
.sp
Where the \fITask\fP and \fICondition\fP editing boxes, the \fISettings\fP dialog and the
\fITask History\fP window might need some more detailed explanation, the other
operations should be pretty straightforward: the \fIPause\fP entry pauses the
scheduler (preventing any condition to occur), \fIAbout...\fP shows information
about the applet and \fIQuit\fP shuts the applet down, removing the icon from the
top panel.
.sp
Some useful features can also be accessed from the \fI\%Command Line Interface\fP,
including advanced tools: by default, when the applet is invoked with no
arguments, it just starts an instance showing the icon in the top panel (if
configured to do so), while the \fICLI\fP allows operations on either a running
instance or the applet configuration.
.sp
The following paragraphs illustrate the details of the applet user interface.
.SH TASKS
.sp
Tasks are basically commands associated with an environment and checks to
determine whether the execution was successful or not. The interface lets the
user configure some basic parameters (such as the startup directory and the
\fIenvironment\fP) as well as what to test after execution (\fIexit code\fP, \fIstdout\fP
or \fIstderr\fP). The user can choose to look for the specified text within the
output and error streams (when \fIExact Match\fP is unchecked, otherwise the entire
output is matched against the given value) and to perform a case sensitive
test, or to match a regular expression. In case a regular expression is chosen,
the applet will try to search \fIstdout\fP or \fIstderr\fP for the given pattern. In
case of regular expressions, when \fIExact Match\fP is chosen, a match test is
performed at the beginning of the output text. Regular expression tests can be
case insensitive as well.
.sp
The environment in which the subprocess is run can either import the current
one (at \fBWhen\fP startup time), use its own variables or both.
.sp
The selected task (if any) can be deleted clicking the \fIDelete\fP button in the
dialog box. However the application will refuse to delete a task that is used
in a condition: remove the task reference from the condition first. Every task
must have an \fIunique name\fP, if a task is named as an existing task it will
replace the existing one. The name \fImust\fP begin with an alphanumeric character
(letter or digit) followed by alphanumerics, dashes and underscores.
.sp
\fBHow to use the "Check for" option:\fP The applet can either ignore whatever
the underlying process returns to the caller by specifying \fINothing\fP in the
\fICheck for\fP group, or check
.INDENT 0.0
.IP \(bu 2
exit code
.IP \(bu 2
process output (\fIstdout\fP)
.IP \(bu 2
process written errors (\fIstderr\fP)
.UNINDENT
.sp
to determine whether the process succeeded or failed. When the user chooses to
check for \fISuccess\fP, the operation is considered successful \fIif and only if\fP
the process result (exit code, output, or error) corresponds to the user
provided value. Same yields for \fIFailure\fP: if \fIFailure\fP is chosen, only the
provided result will indicate a failure. For example, in the most common case
the user will choose to expect \fISuccess\fP to correspond to an \fIExit Code\fP of
\fB0\fP (in fact the default choice), all other exit codes will indicate a
failure. And if the user chooses to expect \fIFailure\fP to be reported as the word
\fBError\fP in the error messages, whatever other error messages will be ignored
and the operation will turn out successful. Please note that since all commands
are executed in the default shell, expect an exit code different from \fB0\fP
when the command is not found. With the \fB/bin/sh\fP shell used on Linux, the
\fInot found\fP code is \fB127\fP\&.
.SH CONDITIONS
.sp
There are several types of condition available:
.INDENT 0.0
.IP 1. 3
\fBInterval based:\fP After a certain time interval the associated tasks are
executed, if the condition is set to repeat checks, the tasks will be
executed again regularly after the same time interval.
.IP 2. 3
\fBTime based:\fP The tasks are executed when the time specification is
matched. Time definitions can be partial, and in that case only the defined
parts will be taken into account for checking: for instance, if the user
only specifies minutes, the condition is verified at the specified minute
for every hour if the \fIRepeat Checks\fP option is set.
.IP 3. 3
\fBCommand based:\fP When the execution of a specified command gives the
expected result (in terms of \fBexit code\fP, \fBstdout\fP or \fBstderr\fP), the
tasks are executed. The way the test command is specified is similar
(although simpler) to the specification of a command in the \fITask\fP
definition dialog box. The command is run in the same environment (and
startup directory) as \fBWhen\fP at the moment it was started.
.IP 4. 3
\fBIdle time based:\fP When the session has been idle for the specified amount
of time the tasks are executed. This actually is implemented as a shortcut
to the command based condition built using the \fBxprintidle\fP command,
which must be installed for the applet to work properly.
.IP 5. 3
\fBEvent based:\fP The tasks are executed when a certain session or system
event occurs. The following events are supported:
.INDENT 3.0
.IP \(bu 2
\fIStartup\fP and \fIShutdown\fP\&. These are verified when the applet (or session,
if the applet is launched at startup) starts or quits.
.IP \(bu 2
\fISuspend\fP and \fIResume\fP, respectively match system suspension/hibernation
and resume from a suspended state.
.IP \(bu 2
\fISession Lock\fP and \fIUnlock\fP, that occur when the screen is locked or
unlocked.
.IP \(bu 2
\fIScreensaver\fP, both entering the screen saver state and exiting from it.
.IP \(bu 2
\fIStorage Device Connect\fP and \fIDisconnect\fP, which take place when the user
attaches or respectively detaches a removable storage device.
.IP \(bu 2
\fIJoin\fP or \fILeave a Network\fP, these are verified whenever a network is
joined or lost respectively.
.IP \(bu 2
\fIBattery Charging\fP, \fIDischarging\fP or \fILow\fP, respectively occurring when
the power cord is plugged, unplugged or the battery is dangerously low:
note that a \fIchange\fP in power status has to arise for the condition to
occur, and the \fILow\fP condition is originated from the system.
.IP \(bu 2
\fICommand Line Trigger\fP is a special event type, that is triggered invoking
the command line. The associated condition can be scheduled to be run at
the next clock tick or immediately using the appropriate switch.
.UNINDENT
.IP 6. 3
\fBBased on filesystem changes:\fP The tasks are run when a certain file
changes, or when the contents of a directory or its subdirectories change,
depending on what the user chose to watch \-\- either a file or a directory.
A dialog box can be used to select what has to be watched. [5]
.IP 7. 3
\fBBased on an user defined event:\fP The user can monitor system events by
listening to \fIDBus\fP signals emitted on either the system bus or the session
bus. [4]
.UNINDENT
.sp
Also, the condition configuration interface allows to decide:
.INDENT 0.0
.IP \(bu 2
whether or not to repeat checks even after a task set has been executed \-\-
that is, make an action \fIrecurring\fP;
.IP \(bu 2
to run the tasks in a task set concurrently or sequentially: when tasks are
set to run sequentially, the user can choose to ignore the outcome of tasks
or to break the sequence on the first failure or success by selecting the
appropriate entry in the box on the right \-\- tasks that don\(aqt check for
success or failure will \fInever\fP stop a sequence;
.IP \(bu 2
to \fIsuspend\fP the condition: it will not be tested, but it\(aqs kept in the
system and remains inactive until the \fISuspend\fP box is unchecked.
.UNINDENT
.sp
The selected condition (if any) can be deleted clicking the \fIDelete\fP button in
the dialog box. Every condition must have an \fIunique name\fP, if a condition is
named as an existing one it will replace it. The name \fImust\fP begin with an
alphanumeric character (letter or digit) followed by alphanumerics, dashes and
underscores.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBShutdown Conditions.\fP Because of the way applications are notified that
the session is ending (first a \fBTERM\fP signal is sent, then a \fBKILL\fP if
the first was unsuccessful), the \fIShutdown\fP event is not suitable for long
running tasks, such as file synchronizations, disk cleanup and similar
actions. The system usually concedes a "grace time" of about one second
before shutting everything down. Longer running tasks will be run if the
users quits the applet through the menu, though. Same yields for \fISuspend\fP:
by specification, no more than one second is available for tasks to
complete.
.IP \(bu 2
\fBDisabled Events.\fP Some events may not be supported on every platform,
even on different Ubuntu implementations. \fIScreen Lock/Unlock\fP for instance
does not follow very strict specifications, and could be disabled on some
desktops. Thus one or more events might appear as \fI[disabled]\fP in the list:
the user still can choose to create a condition based on a disabled event,
but the corresponding tasks will never be run.
.UNINDENT
.UNINDENT
.UNINDENT
.SH CONFIGURATION
.sp
The program settings are available through the specific \fISettings\fP dialog box,
and can be manually set in the main configuration file, which can be found in
\fB~/.config/when\-command/when\-command.conf\fP\&.
.sp
The options are:
.INDENT 0.0
.IP 1. 3
\fBGeneral\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIShow Icon\fP: whether or not to show the indicator icon and menu
.IP \(bu 2
\fIAutostart\fP: set up the applet to run automatically at login
.IP \(bu 2
\fINotifications\fP: whether or not to show notifications upon task failure
.IP \(bu 2
\fIIcon Theme\fP: \fIGuess\fP to let the application decide, otherwise one of
\fIDark\fP (light icons for dark themes), \fILight\fP (dark icons for light
themes), and \fIColor\fP for colored icons that should be visible on all
themes.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 2. 3
\fBScheduler\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIApplication Clock Tick Time\fP: represents the tick frequency of the
application clock, sort of a heartbeat, each tick verifies whether or not
a condition has to be checked; this option is called \fBtick seconds\fP in
the configuration file
.IP \(bu 2
\fICondition Check Skip Time\fP: conditions that require some "effort" (mainly
the ones that depend on an external command) will skip this amount of
seconds from previous check to perform an actual test, should be at least
the same as \fIApplication Clock Tick Time\fP; this is named \fBskip seconds\fP
in the configuration file
.IP \(bu 2
\fIPreserve Pause Across Sessions\fP: if \fItrue\fP (the default) the scheduler
will remain paused upon applet restart if it was paused when the applet (or
session) was closed. Please notice that the indicator icon gives feedback
anyway about the paused/non\-paused state. Use \fBpreserve pause\fP in the
configuration file.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 3. 3
\fBAdvanced\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIMax Concurrent Tasks\fP: maximum number of tasks that can be run in a
parallel run (\fBmax threads\fP in the configuration file)
.IP \(bu 2
\fILog Level\fP: the amount of detail in the log file
.IP \(bu 2
\fIMax Log Size\fP: max size (in bytes) for the log file
.IP \(bu 2
\fINumber Of Log Backups\fP: number of backup log files (older ones are erased)
.IP \(bu 2
\fIInstance History Items\fP: max number of tasks in the event list (\fIHistory\fP
window); this option is named \fBmax items\fP in the configuration file
.IP \(bu 2
\fIEnable User Defined Events\fP: if set, then the user can define events
using DBus \fI(see below)\fP\&. Please note that if there are any user defined
events already present, this option remains set and will not be modifiable.
It corresponds to \fBuser events\fP in the configuration file. Also, to make
this option effective and to enable user defined events in the
\fIConditions\fP dialog box, the applet must be restarted
.IP \(bu 2
\fIEnable File and Directory Notifications\fP: if set, \fBWhen\fP is configured
to enable conditions based on file and directory changes. The option may
result disabled if the required optional libraries are not installed. When
the setting changes, the corresponding events and conditions are enabled
or disabled at next startup.
.IP \(bu 2
\fIEnable Task and Condition Environment Variables\fP: whether or not to export
specific environment variables with task and condition names when spawning
subprocesses (either in \fITasks\fP or in \fICommand Based Conditions\fP). The
configuration entry is \fBenvironment vars\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The configuration is \fIimmediately stored upon confirmation\fP to the
configuration file, although some settings (such as \fINotifications\fP,
\fIIcon Theme\fP, and most advanced settings) might require a restart of the
applet. The configuration file can be edited with a standard text editor, and
it follows some conventions common to most configuration files. The sections
in the file might slightly differ from the tabs in the \fISettings\fP dialog, but
the entries are easily recognizable.
.sp
By default the applet creates a file with the following configuration, which
should be suitable for most setups:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[Scheduler]
tick seconds = 15
skip seconds = 60
preserve pause = true

[General]
show icon = true
autostart = false
notifications = true
log level = warning
icon theme = guess
user events = false
file notifications = false
environment vars = true

[Concurrency]
max threads = 5

[History]
max items = 100
log size = 1048576
log backups = 4
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Manual configuration can be particularly useful to bring back the program
icon once the user decided to hide it [6] losing access to the menu,
by setting the \fBshow icon\fP entry to \fBtrue\fP\&. Another way to force access to
the \fISettings\fP dialog box when the icon is hidden is to invoke the applet from
the command line using the \fB\-\-show\-settings\fP (or \fB\-s\fP) switch when an
instance is running.
.SH THE HISTORY WINDOW
.sp
Since logs aren\(aqt always user friendly, \fBWhen\fP provides an easier
interface to verify task results. Tasks failures are also notified
graphically via the attention\-sign icon and badge notifications, however more
precise information can be found in the \fIHistory\fP box. This shows a list of the
most recent tasks that have been launched by the running instance (the
list length can be configured), which reports:
.INDENT 0.0
.IP \(bu 2
The start time of the task and its duration in seconds
.IP \(bu 2
The task \fIunique name\fP
.IP \(bu 2
The \fIunique name\fP of the condition that triggered the task
.IP \(bu 2
The process \fIexit code\fP (as captured by the shell)
.IP \(bu 2
The result (green \fItick mark\fP for success, red \fIcross mark\fP for failure)
.IP \(bu 2
A short hint on the failure \fIreason\fP (only in case of failure)
.UNINDENT
.sp
and when the user clicks a line in the table, the tabbed box below will
possibly show the output (\fIstdout\fP) and errors (\fIstderr\fP) reported by the
underlying process. The contents of the list can also be exported to a text
file, by invoking the applet with the \fB\-\-export\-history\fP switch from a
console window when an instance is running. The file contains exactly the same
values as the history list, with the addition of a row identifier at the
beginning of the row. Start time and duration are separate values. The first
row of the file consists of column mnemonic titles and the value separator is
a semicolon: the file can be safely imported in spreadsheets, but column
conversions could be needed depending on your locale settings.
.IP [1] 5
Here a \fIcondition occurrence\fP refers to an instant in time
when the condition prerequisites are verified and, in case of success, the
associated task set is scheduled to run, either immediately or shortly after.
.IP [2] 5
There is a limit nevertheless in the number of tasks that can be
simultaneously executed, but this limit can be increased in the applet
\fI\%settings\fP\&.
.IP [3] 5
Most events are \fIdeferred\fP, although there are some whose
associated conditions are immediately evaluated: \fIstartup\fP, \fIshutdown\fP, and
\fIsuspend\fP events will cause the respective conditions to immediately trigger
their task sets. This choice was necessary because it is virtually impossible
to defer events that should occur when the system is shutting down or being
suspended, and because the user might expect that tasks that should occur
at session startup should be run as soon as possible. The only other type
of condition that are validated immediatly on event occurrences are the
\fIcommand\-line\fP enabled ones that are forced to do so via the \fB\-r\fP (or
\fB\-\-run\-condition\fP) switch.
.IP [4] 5
This is an advanced feature and is not available by default.
It has to be enabled in the program settings to be accessible. Refer to the
appropriate chapter for more information.
.IP [5] 5
This is an optional feature, and could lack on some systems:
to enable it the \fBpyinotify\fP library must be installed, please refer to
the instructions below.
.IP [6] 5
I was doubtful about providing the option, then just decided
to implement it and provide a safety net anyway.
.SH AUTHOR
Francesco Garosi
.SH COPYRIGHT
2015, Francesco Garosi
.\" Generated by docutils manpage writer.
.
